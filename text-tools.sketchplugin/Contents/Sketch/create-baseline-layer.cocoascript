@import 'library.cocoascript'
@import 'shared.cocoascript'

function createGuidePath(width,lineHeight,numLines,offset){
    offset = offset || 0;

    var path   = lib.createBezierPath();
    var height = lineHeight - 1;

    for(var i = 0; i < numLines; ++i){
        lib.pathRect(path,0,offset + i * lineHeight,width,height);
    }

    return path;
}

function createGuideGroup(width,lineHeight,numLines,halfStep){
    var guides = [];

    var guideLineHeight = lib.createShapeFromPathWithStyle(
        createGuidePath(width,lineHeight,numLines,0),
        lib.createStyleFromDescription({fill : ['#979797', 0.35]})
    );

    guideLineHeight.setName_('guide');
    guides.push(guideLineHeight);

    if(halfStep){
        var offset = Math.floor(lineHeight * 0.5);

        var guideLineHeightOffset = lib.createShapeFromPathWithStyle(
            createGuidePath(width,lineHeight,numLines-1,offset),
            lib.createStyleFromDescription({fill : ['#979797', 0.135]})
        );
        guideLineHeightOffset.setName_('guide-1/2');
        guides.push(guideLineHeightOffset);
    }

    var group = lib.createGroupFromLayers(guides);
    group.setName_('baseline-guide@' + lineHeight + 'px');

    return group;
}

function createBaselineGroupFromText(layer,width,lineHeight,numLines,halfStep){
    var frame      = layer.frame();
    var metrics    = lib.relToAbsMetrics(lib.getFontMetrics(layer.font()));

    width      = width == 'auto' ? frame.width() : width;
    lineHeight = lineHeight == 'auto' ? layer.lineSpacing() : lineHeight;
    numLines   = numLines == 'auto' ? (Math.round(frame.height() / lineHeight) + 1) : numLines;

    var group = createGuideGroup(width,lineHeight,numLines,halfStep);

    group.frame().setX_(frame.x());
    group.frame().setY_(frame.y() - (lineHeight - Math.floor(metrics.baselineHeight) - 1));
    layer.parentGroup().insertLayers_beforeLayer_([group],layer);
}

function createBaselineLayer(context){
    var selection = lib.getSelectionSimple(context);

    if(!selection.hasSelection() && selection.currentArtboard == null){
        lib.warn(context, 'Create Baseline Layer: No Artboard selected');
        return;
    }

    var selectionFiltered = !selection.hasSelection() ? [] : lib.filterLayersByClass(selection.currentSelection, MSTextLayer);
    var selectionHasTextLayers = selectionFiltered.length != 0;

    var viewWidth = 300;
    var viewHeight = 120;

    var labelWidth = 110;
    var inputWidth = 120;
    var inputOffset = 4;

    var compStep = 26;
    var compOffsetV = viewHeight - 10;
    var compHeight = 20;

    function createLabel(name){
        return lib.createLabel(name, NSMakeRect(0, compOffsetV, labelWidth, compHeight));
    }

    function createInput(value){
        return lib.createTextField(value, NSMakeRect(labelWidth, compOffsetV + inputOffset, inputWidth, compHeight));
    }

    var defaults = {
        width : 200,
        lineHeight : 24,
        numLines : 10,
        halfStep : false
    };

    lib.createPluginDefaults(PLUGIN_ID, defaults, 'baseline');

    var settings = lib.getPluginSettingsObj(PLUGIN_ID, 'baseline');

    print(selectionHasTextLayers);

    if(selectionHasTextLayers){
        settings.width = 'auto';
        settings.lineHeight = 'auto';
        settings.numLines = 'auto';

    }else{
        settings.width = ("" + settings.width) == 'auto' ? defaults.width : settings.width;
        settings.lineHeight = ("" + settings.lineHeight) == 'auto' ? defaults.lineHeight : settings.lineHeight;
        settings.numLines = ("" + settings.numLines) == 'auto' ? defaults.numLines : settings.numLines;
    }

    compOffsetV -= compStep;
    var labelLayerWidth = createLabel('Layer Width');
    var inputLayerWidth = createInput(settings.width);

    compOffsetV -= compStep;
    var labelLineHeight = createLabel('Line Height');
    var inputLineHeight = createInput(settings.lineHeight);

    compOffsetV -= compStep;
    var labelNumLines = createLabel('Num Lines');
    var inputNumLines = createInput(settings.numLines);

    compOffsetV -= compStep;
    var labelLineHeightHalfStep = createLabel('Line Height Â½ Step');
    var checkboxLineHeightHalfStep = lib.createCheckBox('', NSMakeRect(labelWidth, compOffsetV + inputOffset, 20, 20), settings.halfStep);

    var view = lib.createViewWithSubviews(
        NSMakeRect(0, 0, viewWidth, viewHeight), [
            labelLayerWidth, inputLayerWidth,
            labelLineHeight, inputLineHeight,
            labelNumLines, inputNumLines,
            labelLineHeightHalfStep, checkboxLineHeightHalfStep
        ]
    );

    if(!lib.runModalAlert(view, 'Text Tools', 'Create Baseline Layer')){
        return;
    }

    var width = "" + inputLayerWidth.stringValue();
    var lineHeight = "" + inputLineHeight.stringValue();
    var numLines = "" + inputNumLines.stringValue();
    var halfStep = checkboxLineHeightHalfStep.state() == NSOnState;

    width = width != 'auto' ? +width : width;
    lineHeight = lineHeight != 'auto' ? +lineHeight : lineHeight;
    numLines = numLines != 'auto' ? Math.floor(+numLines) : numLines;

    lib.synchronizePluginDefaults(PLUGIN_ID, {
        width : width,
        lineHeight : lineHeight,
        numLines : numLines,
        halfStep : halfStep
    }, 'baseline');

    if(!selectionHasTextLayers){
        var group = createGuideGroup(width, lineHeight, numLines, halfStep);
        var artboard = selection.currentArtboard;

        artboard.addLayers_([group]);

        lib.centerElementToElement(group, artboard, true);
        return;
    }

    for(var i = 0, l = selectionFiltered.length; i < l; ++i){
        createBaselineGroupFromText(selectionFiltered[i], width, lineHeight, numLines, halfStep);
    }
}